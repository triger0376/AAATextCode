{"buildHash":"79fb0628","buildInfo":{"cacheable":true,"fileDependencies":[{"contentHash":"5ba89537","request":"/Users/tiger/Desktop/work/AAATextCode/code/src/view/test/pages/pageOne/options/index.js","statHash":"e70a00a9"}],"contextDependencies":[],"assets":[],"strict":true},"buildMeta":{"providedExports":true},"contentHash":"5ba89537","map":{"version":3,"file":"x","sources":["/Users/tiger/Desktop/work/AAATextCode/code/src/view/test/pages/pageOne/options/index.js"],"sourcesContent":["\n/***\n * \n * 1. 便于逻辑复用，如接口请求，事件绑定，方便拷贝复用\n * 2. 页面逻辑过于复杂可以可以将data[基础数据]，queryData[接口请求操作定义进一步按照模块拆分]\n * 3. 当多页面逻辑业务相似，操作逻辑相似，可以做合并（代码高内聚低耦合） 合并要有度，尽量不是一个业务模块不要创建太高的耦合代码\n * 4. 该文件自身，用于事件处理，事件也可以单独拆一个js文件，没有拆的原因是 事件往往伴随数据处理和接口请求处理而去可能是多个，因此位了方便查看相关引用，关联关系古没有拆分\n * 5. queryData 是定义接口请求对象 在page/index/index.js 中各个生命周期可以直接引用，\n * 6. 所有函数定义引用this对象时，必须使用箭头函数。\n * 7.如有其他疑问和建议联系微信-Lh910376\n * **/\n\nimport data from './data.js'\nimport queryData from './queryData.js'\nexport default {\n  data, // 基础数据定义\n  ...queryData, // 各种接口请求方法\n  // 事件定义处理，\n  handleTap(event) {\n    console.log(\"yo! view tap!\", event);\n    this.setData({\n      text: \"changed data\",\n    });\n  },\n  //页面下拉刷新功能\n  onPullDownRefresh() {\n  let _self=this\n    // 页面被下拉\n   my.showLoading({\n     content: '开始接口请求',\n     delay: 0\n   });\n    console.log('重置请求接口参数，调用请求接口方法刷新数据')\n    setTimeout(()=>{\n     console.log('请求接口成功，获取接口返回数据，改不列表数据', new Date())\n     my.stopPullDownRefresh({\n       success(res){\n        my.hideLoading();\n         my.showToast({\n          type: 'success',\n          content: '接口数据更新成功',\n          duration: 700,\n          success: () => {\n            _self.setData({\n              text: \"接口更新数据成功\",\n              list:[\n                {type:1},\n                {type:2},\n                {type:3},\n                {type:2},\n                {type:2},\n              ]\n            });\n          },\n        });\n       },\n       complete(res) {\n         console.log(res, new Date())\n       }\n     })\n    },3000)\n },\n onReachBottom() {\n  // 页面被拉到底部`````\n  let _self=this\n  let copyList=this.data.list.map(item=>item)\n    my.showLoading({\n      content: '加载数据中',\n      delay: 0\n    });\n    setTimeout(()=>{\n      my.hideLoading();\n      copyList.push(...[{type:1},\n        {type:2},\n        {type:3}])\n      _self.setData({\n        list:copyList,\n      });\n    },1000)\n},\n}\n"],"mappings":";;;;;;;;;;AAYA;AACA;;;AAAA;AACA;;;;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAUA;AAfA;AAiBA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAGA;AACA;AADA;AAGA;AACA;;A"},"source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('@ali/antcube-babel-preset-appx/lib/plugin/transform-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _data = require('./data.js');\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _queryData = require('./queryData.js');\n\nvar _queryData2 = _interopRequireDefault(_queryData);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar global = undefined,\n    self = undefined,\n    window = undefined,\n    document = undefined,\n    location = undefined,\n    XMLHttpRequest = undefined,\n    AlipayJSBridge = undefined,\n    importScript = undefined,\n    importScripts = undefined,\n    AFAppX = undefined,\n    fetch = undefined,\n    $AppxFramework = undefined,\n    $AppxRuntime = undefined,\n    mqEnvironment = undefined,\n    wxEnvironment = undefined,\n    __CUBE_KERNEL__ = undefined;\n\n/***\n * \n * 1. 便于逻辑复用，如接口请求，事件绑定，方便拷贝复用\n * 2. 页面逻辑过于复杂可以可以将data[基础数据]，queryData[接口请求操作定义进一步按照模块拆分]\n * 3. 当多页面逻辑业务相似，操作逻辑相似，可以做合并（代码高内聚低耦合） 合并要有度，尽量不是一个业务模块不要创建太高的耦合代码\n * 4. 该文件自身，用于事件处理，事件也可以单独拆一个js文件，没有拆的原因是 事件往往伴随数据处理和接口请求处理而去可能是多个，因此位了方便查看相关引用，关联关系古没有拆分\n * 5. queryData 是定义接口请求对象 在page/index/index.js 中各个生命周期可以直接引用，\n * 6. 所有函数定义引用this对象时，必须使用箭头函数。\n * 7.如有其他疑问和建议联系微信-Lh910376\n * **/\n\nexports.default = (0, _extends3.default)({\n  data: _data2.default }, _queryData2.default, {\n  // 各种接口请求方法\n  // 事件定义处理，\n  handleTap: function handleTap(event) {\n    console.log(\"yo! view tap!\", event);\n    this.setData({\n      text: \"changed data\"\n    });\n  },\n\n  //页面下拉刷新功能\n  onPullDownRefresh: function onPullDownRefresh() {\n    var _self = this;\n    // 页面被下拉\n    my.showLoading({\n      content: '开始接口请求',\n      delay: 0\n    });\n    console.log('重置请求接口参数，调用请求接口方法刷新数据');\n    setTimeout(function () {\n      console.log('请求接口成功，获取接口返回数据，改不列表数据', new Date());\n      my.stopPullDownRefresh({\n        success: function success(res) {\n          my.hideLoading();\n          my.showToast({\n            type: 'success',\n            content: '接口数据更新成功',\n            duration: 700,\n            success: function success() {\n              _self.setData({\n                text: \"接口更新数据成功\",\n                list: [{ type: 1 }, { type: 2 }, { type: 3 }, { type: 2 }, { type: 2 }]\n              });\n            }\n          });\n        },\n        complete: function complete(res) {\n          console.log(res, new Date());\n        }\n      });\n    }, 3000);\n  },\n  onReachBottom: function onReachBottom() {\n    // 页面被拉到底部`````\n    var _self = this;\n    var copyList = this.data.list.map(function (item) {\n      return item;\n    });\n    my.showLoading({\n      content: '加载数据中',\n      delay: 0\n    });\n    setTimeout(function () {\n      my.hideLoading();\n      copyList.push.apply(copyList, [{ type: 1 }, { type: 2 }, { type: 3 }]);\n      _self.setData({\n        list: copyList\n      });\n    }, 1000);\n  }\n});\nmodule.exports = exports['default'];","statHash":"e70a00a9","dependencies":[{"args":["",[0,13],null],"extra":[],"loc":{"end":{"line":1,"column":13},"start":{"line":1,"column":0}},"optional":false,"type":"ConstDependency"},{"args":["@ali/antcube-babel-preset-appx/lib/plugin/transform-runtime/helpers/extends",[105,182]],"extra":[],"loc":{"end":{"line":7,"column":102},"start":{"line":7,"column":16}},"optional":false,"type":"CommonJsRequireDependency"},{"args":[[97,104]],"extra":[],"loc":{"end":{"line":7,"column":102},"start":{"line":7,"column":16}},"optional":false,"type":"RequireHeaderDependency"},{"args":["./data.js",[258,269]],"extra":[],"loc":{"end":{"line":11,"column":32},"start":{"line":11,"column":12}},"optional":false,"type":"CommonJsRequireDependency"},{"args":[[250,257]],"extra":[],"loc":{"end":{"line":11,"column":32},"start":{"line":11,"column":12}},"optional":false,"type":"RequireHeaderDependency"},{"args":["./queryData.js",[343,359]],"extra":[],"loc":{"end":{"line":15,"column":42},"start":{"line":15,"column":17}},"optional":false,"type":"CommonJsRequireDependency"},{"args":[[335,342]],"extra":[],"loc":{"end":{"line":15,"column":42},"start":{"line":15,"column":17}},"optional":false,"type":"RequireHeaderDependency"}],"variables":[]}