import { IBuilderDebugClient, IBuilderDebugClientOptions, IUpdateAssetsOptions, IGenerateInjectCodeOptions, IGetBoatmanBundleOptions } from './interface';
import { AssetsUpdater } from './updater';
import { BuilderDebugContext } from './context';
export declare class BuilderDebugClient implements IBuilderDebugClient {
    protected assetsUpdater: AssetsUpdater;
    protected context: BuilderDebugContext;
    constructor(options?: IBuilderDebugClientOptions);
    updateOfflineAssets(options: IUpdateAssetsOptions): Promise<void>;
    generateInjectCode(options: IGenerateInjectCodeOptions): Promise<import("./interface").IInjectionPoints>;
    /**
     * generateInjectCode 同步方法
     */
    generateInjectCodeSync(options: IGenerateInjectCodeOptions): import("./interface").IInjectionPoints;
    /**
     * 生成构建器消费的 InjectCode JSON 文件，并返回路径
     */
    generateInjectCodePath(options: IGenerateInjectCodeOptions): Promise<string>;
    /**
     * generateInjectCodePath 同步方法
     */
    generateInjectCodePathSync(options: IGenerateInjectCodeOptions): string;
    /**
     * 获取本地 boatman 文件资源路径
     */
    getBoatmanBundlePath(options: IGetBoatmanBundleOptions): Promise<string>;
    /**
     * getBoatmanBundlePath 同步方法
     */
    getBoatmanBundlePathSync(options: IGetBoatmanBundleOptions): string;
}
